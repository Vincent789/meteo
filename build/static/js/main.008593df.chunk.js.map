{"version":3,"sources":["reportWebVitals.js","components/three/Farm.jsx","components/three/TwitterBird.jsx","components/three/utils/getRandomInt.js","components/three/utils/randomBetween.js","components/three/Feuillage.jsx","components/three/Text.jsx","components/three/Map.jsx","components/Home.jsx","components/ThreeGui.js","reducers/counter.js","reducers/isLogged.js","App.js","reducers/index.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Hut","props","group","useRef","useGLTF","nodes","materials","animations","useAnimations","actions","ref","dispose","rotation","Math","PI","position","name","material","material_2","geometry","material_1","preload","Farm","fallback","scale","Component","TwitterBird","groupbird","useState","hovered","setHover","active","setActive","twitter","onClick","e","onPointerOver","onPointerOut","color","side","THREE","Twitter","getRandomInt","max","floor","random","randomBetween","x","numb","Feuillage","numbertrees","console","log","treepositions","i","object","y","z","push","grouptrees","expand","setExpand","map","d","index","mesh","castShadow","attach","args","meshPhysicalMaterial","Trees","this","treecolor","TextMesh","text","useFrame","textOptions","font","parse","JSONfont","size","height","Text","location","Terrain","terraincolor","meshterrain","CornField","fieldcolor","meshfield","Map","night","azimuth","azimuthNow","currenthour","Date","getHours","daylength","round","inclination","inclinationNow","noon","total","softShadows","Rain","numberrain","rainpositions","rainNewPosX","rainNewPosZ","grouprain","current","useSpring","Snow","numbersnow","snowpositions","snowNewPosX","snowNewPosZ","groupsnow","Clouds","number","cloudpositions","groupclouds","receiveshadow","roughness","opacity","transparent","Lights","intensity","angle","penumbra","shadow-mapSize-width","shadow-mapSize-height","Home","style","width","backgroundColor","Sky","distance","turbidity","rayleigh","exposure","OrbitControls","cloudscolor","numberclouds","snow","rain","Stars","radius","depth","count","factor","saturation","fade","ThreeGui","connect","state","INCREMENT_RAIN","DECREMENT_RAIN","counterReducer","trees","clouds","action","type","loggedReducer","store","combineReducers","counter","isLogged","createStore","App","handleButtonSnow","bind","handleButtonRain","setState","cloudcolors","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.008593df.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useRef, Suspense, Component } from 'react'\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\n\n\n//Checker react.useRef mais dans un component\n\n\nfunction Hut(props) {\n    const group = useRef()\n    const { nodes, materials, animations } = useGLTF('scene.gltf')\n    const { actions } = useAnimations(animations, group)\n    return (\n      <group ref={group} {...props} dispose={null}>\n        <group rotation={[-Math.PI / 2, 0, 0]}>\n          <group rotation={[Math.PI / 2, 0, 0]}>\n            <group position={[-502.64, 422.99, -132.71]}>\n              <group\n                name=\"������������_��������������_2\"\n                position={[-10.87, 231.34, -23.05]}\n                rotation={[Math.PI / 2, -0.91, -Math.PI]}>\n                <group position={[13.88, -40, -33.71]} rotation={[1.77, -0.46, -2.71]}>\n                  <mesh\n                    material={materials.material_2}\n                    geometry={nodes['������������_������_����������������2_0'].geometry}\n                  />\n                </group>\n                <mesh\n                  material={materials.material_2}\n                  geometry={nodes['������������_��������������_2_����������������2_0'].geometry}\n                />\n              </group>\n              <group position={[21.39, -295, 98.38]}>\n                <mesh\n                  material={materials.material}\n                  geometry={nodes['������������_������_2_����������������_0'].geometry}\n                />\n                <mesh\n                  material={materials.material}\n                  geometry={nodes['������������_������_2_����������������_0_1'].geometry}\n                />\n              </group>\n              <group position={[-10.52, 63.66, -75.33]} rotation={[Math.PI, 0, Math.PI]}>\n                <mesh material={materials.material_1} geometry={nodes['rr_����������������1_0'].geometry} />\n              </group>\n            </group>\n          </group>\n        </group>\n      </group>\n    )\n}\n\nuseGLTF.preload('/Cottage.glb')\n    \nclass Farm extends Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return(\n          <Suspense fallback={null}>\n            <Hut scale={[0.02, 0.02, 0.02]} position={[2, 5, -20]}/>\n          </Suspense>\n        )\n    }\n}\n\nexport default Farm;","import * as THREE from 'three'\nimport React, { useRef, Suspense, Component, useState } from 'react'\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\n\nfunction TwitterBird(props) {\n    const groupbird = useRef()\n    const { nodes, materials } = useGLTF('twitter.glb')\n  \n    const [hovered, setHover] = useState(false)\n    const [active, setActive] = useState(false)\n  \n    return (\n      <group ref={groupbird} {...props} dispose={null}>\n        <mesh \n          geometry={nodes.twitter.geometry} \n          rotation={[Math.PI / 2, 0, 0]}\n          onClick={(e) => setActive(!active)}\n          onPointerOver={(e) => setHover(true)}\n          onPointerOut={(e) => setHover(false)}>\n          <meshPhysicalMaterial color={hovered ? '#9cfffd' : '#00acee'} side={THREE.DoubleSide}/>\n        </mesh>\n      </group>\n    )\n}\n\nuseGLTF.preload('/Cottage.glb')\n    \nclass Twitter extends Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return(\n          <Suspense fallback={null}>\n             <TwitterBird position={[100, 100, 10]} rotation={[-0.5, 0.5, 0]}/>\n          </Suspense>\n        )\n    }\n}\n\nexport default Twitter;","function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max)) - Math.floor(Math.random() * Math.floor(max));\n}\nexport default getRandomInt","import getRandomInt from './getRandomInt'\n\nfunction randomBetween(x){\n    let numb = getRandomInt(x)\n    if ( numb > 13 || numb < -13 ){\n      return numb\n    }\n    else {\n      randomBetween(x)\n    }\n}\n\nexport default randomBetween","import * as THREE from 'three'\nimport React, { useRef, Component, useState } from 'react'\nimport { useGLTF } from \"@react-three/drei\";\nimport { a } from 'react-spring/three'\nimport getRandomInt from './utils/getRandomInt'\nimport randomBetween from './utils/randomBetween'\n\nfunction Feuillage(props, color, numbertrees) {\n    console.log(props.color)\n\n    var treepositions = []\n    for (let i = 0; i < props.numbertrees; i++) {\n        let treeNewPosX = randomBetween(45);\n        let treeNewPosZ = getRandomInt(45); \n        let object = {\n          x: treeNewPosX,\n          y: 8,\n          z: treeNewPosZ\n        } \n        treepositions.push(object)\n    }\n\n    \n    console.log(\"TREEPOSITIONS :\"+treepositions)\n    const grouptrees = useRef();\n\n    //Basic expand state\n    const [expand, setExpand] = useState(false);\n  \n    return  (\n      <group ref={grouptrees}>\n        { treepositions.map((d, index) =>  (\n        <a.mesh\n          position={[d.x, d.y, d.z]}\n          key={index}\n          onClick={() => setExpand(!expand)}\n          scale={[ 5, 15, 5 ]}\n          castShadow>\n          <coneBufferGeometry attach=\"geometry\" args={d.args} />\n          <a.meshPhysicalMaterial attach=\"material\" color={props.color} />\n        </a.mesh>\n      ))}\n      </group>\n    );\n}\n\nuseGLTF.preload('/Cottage.glb')\n    \nclass Trees extends Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return(\n            <Feuillage numbertrees={100} color={this.props.treecolor}/>\n        )\n    }\n}\n\nexport default Trees;","import React, { useRef, useState, Component } from 'react'\nimport * as THREE from 'three'\nimport { useFrame } from 'react-three-fiber'\nimport JSONfont from \"../../fonts/Cocogoose.json\";\n\nfunction TextMesh(props, text, position) {\n    const [hovered, setHover] = useState(false);\n    const mesh = useRef();\n    console.log(\"PROPS TEXT : \"+props.text)\n  \n    // actions to perform in current frame\n    useFrame(() => {\n      //mesh.current.rotation.x = mesh.current.rotation.y += 0.01;\n      //mesh.current.geometry.center();\n    });\n    \n    // load in font\n    const font = new THREE.FontLoader().parse(JSONfont);\n  \n    // configure font mesh\n    const textOptions = {\n      font,\n      size: 100,\n      height: hovered ? 1 : 0\n    };\n    //qqch qui ne se fait pas dans le update !!!!!!!!!!!\n  \n    return (\n      <mesh\n        ref={mesh}\n        onPointerOver={(e) => setHover(true)}\n        onPointerOut={(e) => setHover(false)}\n        position={[-200, -50, -200]}\n      >\n        <textGeometry  attach=\"geometry\" args={[props.text, textOptions]} />\n        <meshBasicMaterial color={hovered ? 'black' : 'white'} />\n      </mesh>\n    );\n}\n\nclass Text extends Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return(\n            <TextMesh text={this.props.location}/>\n        )\n    }\n}\n\nexport default Text;","import React, { useRef, useState, Component } from 'react'\nimport { useFrame } from 'react-three-fiber'\n\nfunction Terrain(props, terraincolor) {\n    // This reference will give us direct access to the mesh\n    const meshterrain = useRef()\n    console.log(props.terraincolor)\n    // Set up state for the hovered and active state\n    const [hovered, setHover] = useState(false)\n    const [active, setActive] = useState(false)\n    // Rotate mesh every frame, this is outside of React without overhead\n    useFrame(() => {\n      //mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n    })\n    return (\n      <mesh\n        {...props}\n        ref={meshterrain}\n        scale={active ? [1, 1, 1] : [1, 1, 1]}\n        onClick={(e) => setActive(!active)}\n        onPointerOver={(e) => setHover(true)}\n        onPointerOut={(e) => setHover(false)}>\n        <boxBufferGeometry args={[105, 3, 105]} />\n        <meshStandardMaterial color={props.terraincolor} />\n      </mesh>\n    )\n}\n\nfunction CornField(props, fieldcolor) {\n  // This reference will give us direct access to the mesh\n  const meshfield = useRef()\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => {\n    //mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n  })\n  return (\n    <mesh\n      {...props}\n      ref={meshfield}\n      scale={active ? [1, 1, 1] : [1, 1, 1]}\n      onClick={(e) => setActive(!active)}\n      onPointerOver={(e) => setHover(true)}\n      onPointerOut={(e) => setHover(false)}>\n      <boxBufferGeometry args={[20, 2,40]} />\n      <meshStandardMaterial color={props.fieldcolor} />\n    </mesh>\n  )\n}\n\nclass Map extends Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return(\n            <group>\n                <Terrain \n                    position={[0, 0, 0]} \n                    terraincolor = {this.props.terraincolor}\n                />\n                <CornField position={[0, 2, 20]} fieldcolor={this.props.fieldcolor}/>\n            </group>\n        )\n    }\n}\n\nexport default Map;","import React, { useRef, useState, Component } from 'react'\nimport * as THREE from 'three'\nimport { Canvas, useFrame } from 'react-three-fiber'\nimport { softShadows, Sky, Stars, OrbitControls } from \"@react-three/drei\";\nimport { useSpring, a } from 'react-spring/three'\nimport JSONfont from \"../fonts/Cocogoose.json\";\n//JSX\nimport Farm from \"./three/Farm.jsx\"\nimport Twitter from \"./three/TwitterBird.jsx\"\nimport Trees from \"./three/Feuillage.jsx\"\nimport Text from \"./three/Text.jsx\"\nimport Map from \"./three/Map.jsx\"\n\n\nvar night = false\n//const hourtest = 12\n\nfunction azimuth(){\n  //Get current geographic hour\n  var d = new Date();\n  //get current hour\n  var currenthour = d.getHours();\n  //console.log(\"CurrentHour :\"+currenthour)\n  //get by API\n  let daystart = 6; //heure de début de journée\n  let daylength = Math.round(12) //longueur du jour\n\n  //currenthour = hourtest\n\n  //Ex : Valeur de départ Azimuth: 0.1171\n  //Ex : Valeur de fin Azimuth: 0.3882\n  //Ex : longueur totale de la translation d'azimuth : 0.3882 - 0.1171\n  let total = 0.5\n\n  //déclaration de la valeur courante\n  let azimuthNow\n\n  azimuthNow = (total * (currenthour-daystart))/daylength\n\n  //sets night to true if night it is\n  if ( (currenthour > (daylength + daystart)-1)||(currenthour < daylength) ){\n    night = true\n    console.log(\"NIGHT : \"+night)\n  }\n  else\n  {\n    night = false\n    console.log(\"NIGHT : \"+night)\n  }\n\n  //console.log(azimuthNow)\n  //console.log(\"AZIMUTH NOW: \"+azimuthNow)\n  return azimuthNow\n}\n\nfunction inclination(){\n  //Get current geographic hour\n  var d = new Date();\n  //get current hour\n  var currenthour = d.getHours();\n  //console.log(n)\n\n  //get by API\n  let daystart = 6; //heure de début de journée\n  let daylength = Math.round(12) //longueur du jour\n  let noon = daylength/2 + daystart //midi = la moitié de la journée de soleil + l'heure de démarrage\n  //soit pour un jour d'ensoleillement de 11h = 11/2 + 6 = 11.5\n\n  //currenthour = hourtest\n\n  //Ex : Valeur de départ Inclination: 0.1171\n  //Ex : Valeur de fin Inclination: 0.3882\n  //Ex : longueur totale de la translation d'azimuth : 0.3882 - 0.1171\n  let total = 0.5 - 0.388\n\n  //déclaration de la valeur courante\n  let inclinationNow\n\n  if (currenthour < noon) {\n    inclinationNow = (currenthour - daystart) * total / (daylength/2);\n  }\n  else\n  {\n    let diffHour = noon - (currenthour - noon)\n    inclinationNow = (diffHour - daystart) * total / (daylength/2);\n  }\n\n  //console.log(\"INCLINATION NOW: \"+inclinationNow + 0.50)\n  return inclinationNow + 0.50\n  /*\n  azimuth\n  0.1171\n  0.3882\n\n  inclination\n  0.5\n  0.388\n  0.5\n\n  exposure\n  0.1171   */\n}\n\n// soft Shadows\nsoftShadows();\n\n//globals\nvar forestNumber = []\nconst numbertrees = 300\nconst numberclouds = 100\n\n//text\nfunction TextMesh(props, text, position) {\n    const [hovered, setHover] = useState(false);\n    const mesh = useRef();\n    console.log(\"PROPS TEXT : \"+props.text)\n  \n    // actions to perform in current frame\n    useFrame(() => {\n      //mesh.current.rotation.x = mesh.current.rotation.y += 0.01;\n      //mesh.current.geometry.center();\n    });\n    \n    // load in font\n    const font = new THREE.FontLoader().parse(JSONfont);\n  \n    // configure font mesh\n    const textOptions = {\n      font,\n      size: 100,\n      height: hovered ? 1 : 0\n    };\n    //qqch qui ne se fait pas dans le update !!!!!!!!!!!\n  \n    return (\n      <mesh\n        ref={mesh}\n        onPointerOver={(e) => setHover(true)}\n        onPointerOut={(e) => setHover(false)}\n        position={[-200, -50, -200]}\n      >\n        <textGeometry  attach=\"geometry\" args={[props.text, textOptions]} />\n        <meshBasicMaterial color={hovered ? 'black' : 'white'} />\n      </mesh>\n    );\n  }\n\n\nconst Rain = ({ position, color, args, numberrain }) => {\n\n  var rainpositions = []\n  for (let i = 0; i < numberrain; i++) {\n      let rainNewPosX = getRandomInt(45);\n      let rainNewPosZ = getRandomInt(45); \n      let object = {\n        x: rainNewPosX,\n        y: 40+getRandomInt(10),\n        z: rainNewPosZ\n      }\n      rainpositions.push(object)\n  }\n\n\n  //ref to target the mesh\n  const grouprain = useRef();\n\n  //useFrame allows us to re-render/update on each frame\n  useFrame(() => {\n    if (grouprain.current == null ){\n      //console.log(\"grouprain null\")\n    }\n    else\n    {\n      if (grouprain.current.position.y >= -40){\n        grouprain.current.position.y = grouprain.current.position.y -= 1.2\n      }\n      else\n      {\n        grouprain.current.position.y = 5;\n      }\n    }\n  });\n\n  //Basic expand state\n  const [expand, setExpand] = useState(false);\n  // React spring expand animation\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n  });\n  return  (\n    <group ref={grouprain}>\n      { rainpositions.map((d, index) =>  (\n      <a.mesh\n        position={[d.x, d.y, d.z]}\n        key={index}\n        onClick={() => setExpand(!expand)}\n        scale={props.scale}\n        castShadow>\n        <boxBufferGeometry attach='geometry' args={args} />\n        <meshBasicMaterial color={color} />\n      </a.mesh>\n    ))}\n    </group>\n  );\n};\n\nconst Snow = ({ position, color, args, numbersnow }) => {\n\n  var snowpositions = []\n  for (let i = 0; i < numbersnow; i++) {\n      let snowNewPosX = getRandomInt(45);\n      let snowNewPosZ = getRandomInt(45); \n      let object = {\n        x: snowNewPosX,\n        y: 40+getRandomInt(10),\n        z: snowNewPosZ\n      }\n      snowpositions.push(object)\n  }\n\n\n  //ref to target the mesh\n  const groupsnow = useRef();\n\n  //useFrame allows us to re-render/update on each frame\n  useFrame(() => {\n    if (groupsnow.current == null ){\n      console.log(\"groupsnow null\")\n    }\n    else\n    {\n      if (groupsnow.current.position.y >= -40){\n        groupsnow.current.position.y = groupsnow.current.position.y -= 1.2\n      }\n      else\n      {\n        groupsnow.current.position.y = 5;\n      }\n    }\n  });\n\n  //Basic expand state\n  const [expand, setExpand] = useState(false);\n  // React spring expand animation\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n  });\n  return  (\n    <group ref={groupsnow}>\n      { snowpositions.map((d, index) =>  (\n      <a.mesh\n        position={[d.x, d.y, d.z]}\n        key={index}\n        onClick={() => setExpand(!expand)}\n        scale={props.scale}\n        castShadow>\n        <sphereBufferGeometry attach='geometry' args={args} />\n        <meshBasicMaterial color={color} />\n      </a.mesh>\n    ))}\n    </group>\n  );\n};\n\nfunction Clouds(props, color, number) {\n\n  var cloudpositions = []\n  for (let i = 0; i < props.number; i++) {\n      let cloudNewPosX = getRandomInt(45);\n      let cloudNewPosY = 50+getRandomInt(15); \n      let cloudNewPosZ = getRandomInt(45);\n      let object = {\n        x: cloudNewPosX,\n        y: cloudNewPosY,\n        z: cloudNewPosZ\n      } \n      cloudpositions.push(object)\n  }\n\n  const groupclouds = useRef();\n\n  //Basic expand state\n  const [expand, setExpand] = useState(false);\n\n  return  (\n    <group ref={groupclouds}>\n      { cloudpositions.map((d, index) =>  (\n      <a.mesh\n        position={[d.x, d.y, d.z]}\n        key={index}\n        onClick={() => setExpand(!expand)}\n        scale={[ 20, 8, 20 ]}\n        castShadow\n        receiveshadow>\n        <boxBufferGeometry attach=\"geometry\" args={d.args} />\n        <a.meshPhysicalMaterial attach=\"material\" color={props.color} roughness={0} opacity={0.8} transparent={true} />\n      </a.mesh>\n    ))}\n    </group>\n  );\n}\n\nfunction Lights() {\n  return (\n    <group>\n      <pointLight intensity={1} />\n      <ambientLight intensity={0.3} />\n      <spotLight\n        castShadow\n        intensity={0.1}\n        angle={Math.PI / 7}\n        position={[150, 150, 250]}\n        penumbra={1}\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n      />\n    </group>\n  )\n}\n\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max)) - Math.floor(Math.random() * Math.floor(max));\n}\n\nclass Home extends Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return(\n            <Canvas style={{height:\"100vh\",width:\"100vw\",backgroundColor:\"#abfff5\"}}>\n            <Sky\n              distance={45000} // Camera distance (default=450000)\n              inclination={inclination()} // Sun elevation angle from 0 to 1 (default=0)\n              azimuth={azimuth()} // Sun rotation around the Y axis from 0 to 1 (default=0.25)\n              turbidity={20}\n              rayleigh={4}\n              exposure={1000}\n            />\n            <Lights />\n            <OrbitControls />\n            <Trees treecolor={this.props.treecolor}/>\n            <Clouds color={this.props.cloudscolor} number={this.props.numberclouds}/>\n            <Text location={this.props.location}/>\n            <Snow\n                color='white'\n                args={[1, 1, 1]}\n                numbersnow = {this.props.snow}\n            />\n            <Rain\n                color='grey'\n                args={[0.3, 10, 0.3]}\n                numberrain = {this.props.rain}\n            />\n            <Map terraincolor={this.props.terraincolor} fieldcolor={this.props.fieldcolor}/>\n            {night = true &&\n              <Stars\n                radius={200} // Radius of the inner sphere (default=100)\n                depth={50} // Depth of area where stars should fit (default=50)\n                count={5000} // Amount of stars (default=5000)\n                factor={4} // Size factor (default=4)\n                saturation={0} // Saturation 0-1 (default=0)\n                fade // Faded dots (default=false)\n              />\n            }\n              <Farm />\n              <Twitter />\n          </Canvas>\n        )\n    }\n}\n\nexport default Home;\n\n/*<Stars\nradius={100} // Radius of the inner sphere (default=100)\ndepth={50} // Depth of area where stars should fit (default=50)\ncount={5000} // Amount of stars (default=5000)\nfactor={4} // Size factor (default=4)\nsaturation={0} // Saturation 0-1 (default=0)\nfade // Faded dots (default=false)\n\n  \n            <Farm />\n\n            <Rain\n                color='grey'\n                args={[0.3, 10, 0.3]}\n                numberrain = {this.props.rain}\n            />\n            <Snow\n                color='white'\n                args={[1, 1, 1]}\n                numbersnow = {this.props.snow}\n            />\n            <Suspense fallback={null}>\n              <TwitterBird position={[100, 100, 10]} rotation={[-0.5, 0.5, 0]}/>\n            </Suspense>\n<Groupfarm scale={[0.02, 0.02, 0.02]} position={[3, 5, -3]}/>\n            \n\n/>*/","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\nclass ThreeGui extends Component {\n  constructor(props){\n    super(props)\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.props.rain}</h1>\n        test\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    rain: state.rain\n  }\n}\nexport default connect(mapStateToProps)(ThreeGui)","export const INCREMENT_RAIN = \"frontwidgets/rain/INCREMENT\"\nexport const DECREMENT_RAIN = \"frontwidgets/rain/DECREMENT\"\n\nconst counterReducer = ( state={\n    snow: 7,\n    rain: 12,\n    trees: 23,\n    clouds: 40\n}, action ) => {\n    switch(action.type){\n      case INCREMENT_RAIN:\n        return {\n            ...state, rain: state.rain+10\n        }\n      case DECREMENT_RAIN:\n        return {\n            ...state, rain: state.rain-10\n        }  \n      default:\n        return state\n    }\n}\n\nexport default counterReducer\n\nexport function incrementRain(){\n    return {\n        type: INCREMENT_RAIN\n    }\n}\n\nexport function decrementRain(){\n    return {\n        type: INCREMENT_RAIN\n    }\n}","const loggedReducer = (state = false, action) => {\n    switch(action.type){\n        case 'SIGN_IN':\n          return !state\n        default:\n          return state\n    }\n}\n\nexport default loggedReducer","import React, { Component } from 'react';\nimport Home from './components/Home.jsx';\nimport ThreeGui from './components/ThreeGui';\nimport { createStore } from 'redux'\nimport  allReducers  from './reducers'\nimport { Provider } from 'react-redux'\nimport counterReducer from './reducers/counter'\n\nconst store = createStore(counterReducer)\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      snow: 0,\n      terraincolor: '#667306',\n      fieldcolor: '#f5be18',\n      treecolor: '#076931',\n      rain: 0,\n      state: 0,\n      numberclouds: 0,\n      location: 'LYON'\n    }\n\n    this.handleButtonSnow = this.handleButtonSnow.bind(this)\n    this.handleButtonRain = this.handleButtonRain.bind(this)\n  }\n  handleButtonSnow(){\n    if ( this.state.snow == 0 ){\n      this.setState({\n        snow: 100,\n        terraincolor: '#ffffff',\n        fieldcolor: '#dedede',\n        treecolor: '#ffffff',\n        state: 1,\n        numberclouds: 50,\n        cloudscolor: '#ffffff'\n      })\n    }\n    else\n    {\n      this.setState({\n        snow: 0,\n        terraincolor: '#516e20',\n        fieldcolor: '#fcc305',\n        treecolor: '#006335',\n        numberclouds: 0,\n        cloudscolor: '#ffffff'\n      })\n    }\n  }\n  handleButtonRain(){\n    if ( this.state.rain == 0 ){\n      this.setState({\n        rain: 100,\n        terraincolor: '#095c02',\n        fieldcolor: '#542704',\n        treecolor: '#024712',\n        numberclouds: 50,\n        cloudcolors: '#ffffff'\n      })\n    }\n    else\n    {\n      this.setState({\n        rain: 0,\n        numberclouds: 0,\n        terraincolor: '#516e20',\n        fieldcolor: '#fcc305',\n        treecolor: '#006335',\n        numberclouds: 0,\n        cloudscolor: '#ffffff'\n      })\n    }\n  }\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <h1>{this.state.snow}</h1>\n          <ThreeGui/>\n          <button onClick={this.handleButtonSnow}>Snow</button>\n          <button onClick={this.handleButtonRain}>Rain</button>\n          <Home \n            snow={this.state.snow}\n            rain={this.state.rain}\n            terraincolor={this.state.terraincolor}\n            state={this.state.state}\n            fieldcolor={this.state.fieldcolor}\n            treecolor={this.state.treecolor}\n            numberclouds={this.state.numberclouds}\n            cloudscolor={this.state.cloudcolors}\n            location={this.state.location}\n          />\n        </div>\n      </Provider>\n    )\n  }\n}\nexport default App;","import counterReducer from './counter'\nimport loggedReducer from './isLogged'\nimport { combineReducers } from 'redux'\n\nconst allReducers = combineReducers({\n    counter: counterReducer,\n    isLogged: loggedReducer\n})\n\nexport default allReducers","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App'\nimport { ActionCreators } from 'redux-devtools';\n\n\n//STORE : Globalized state\n/*\n//ACTION INCREMENT\nconst increment = () => {\n  return {\n    type: 'INCREMENT'\n  }\n}\n//DECREMENT\nconst decrement = () => {\n  return {\n    type: 'DECREMENT'\n  }\n}\n//REDUCER\nconst counter = ( state = 0, action ) =>{\n  switch(action.type){\n    case \"INCREMENT\":\n      return state+10\n    case \"DECREMENT\":\n      return state-10\n  }\n} \n\nlet store = createStore(counter)\n\n//display in console\nstore.subscribe(() => console.log(store.getState()))\n\nstore.dispatch(increment())\nstore.dispatch(decrement())\n*/\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n//Other components     <ThreedBackground />\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}