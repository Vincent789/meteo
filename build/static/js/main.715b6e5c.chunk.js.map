{"version":3,"sources":["reportWebVitals.js","ThreedBackground.js","components/three/Farm.jsx","components/Home.jsx","components/ThreeGui.js","reducers/counter.js","reducers/isLogged.js","App.js","reducers/index.js","index.js"],"names":["reportWebVitals","Component","document","getElementById","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Hut","props","group","useRef","useGLTF","nodes","materials","animations","useAnimations","actions","ref","dispose","rotation","Math","PI","position","name","material","material_2","geometry","material_1","preload","night","azimuth","currenthour","Date","getHours","console","log","azimuthNow","daylength","round","inclination","inclinationNow","noon","total","softShadows","TextMesh","useState","hovered","setHover","mesh","useFrame","textOptions","font","THREE","parse","JSONfont","size","height","onPointerOver","e","onPointerOut","attach","args","color","getRandomInt2","max","floor","random","Rain","numberrain","rainpositions","i","treeNewPosX","getRandomInt","treeNewPosZ","object","x","y","z","push","grouprain","current","expand","setExpand","useSpring","scale","map","d","index","onClick","castShadow","Snow","numbersnow","snowpositions","groupsnow","randomBetween","numb","treecolors","cloudcolors","randomtrees","length","randomclouds","dataclouds","Array","fill","Feuillage","state","datatrees","useSprings","from","springs","receiveShadow","meshPhysicalMaterial","Clouds","springs2","roughness","opacity","transparent","Lights","intensity","angle","penumbra","shadow-mapSize-width","shadow-mapSize-height","Terrain","terraincolor","meshterrain","active","setActive","CornField","fieldcolor","meshfield","Groupfarm","groupfarm","Home","style","width","backgroundColor","Sky","distance","turbidity","rayleigh","exposure","this","snow","rain","fallback","ThreeGui","connect","INCREMENT_RAIN","DECREMENT_RAIN","counterReducer","trees","clouds","action","type","loggedReducer","store","combineReducers","counter","isLogged","createStore","App","handleButtonSnow","bind","handleButtonRain","setState","className","ReactDOM","render"],"mappings":"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","file":"static/js/main.715b6e5c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls'\nimport { CSS3DObject, CSS3DSprite, CSS3DRenderer } from 'three/examples/jsm/renderers/CSS3DRenderer.js'\nimport TextSprite from '@seregpie/three.text-sprite';\n\n\n//Global vars\nlet control, orbit;\nconst message = \"Metep\";\n\nclass ThreedBackground extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setClearColor( 0xabfff5 );\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    document.body.appendChild( renderer.domElement );\n\n\n\n    const light = new THREE.AmbientLight( 0x404040 ); // soft white light\n    scene.add( light );\n\n    \n    const lightshadows = new THREE.PointLight( 0xf5a53d, 1, 200 ); // soft white light\n    lightshadows.position.set( 0, 40, 3 );\n\n    scene.add( lightshadows );\n\n\n    //ORBIT\n    const orbitcontrols = new OrbitControls( camera, renderer.domElement );\n    \n    function getRandomInt(max) {\n      return Math.floor(Math.random() * Math.floor(max)) - Math.floor(Math.random() * Math.floor(max));\n    }\n\n    var forestNumber = []\n    for (let i = 0; i < 1000; i++) {\n      let treeNewPosX = getRandomInt(50);\n      let treeNewPosZ = getRandomInt(50); \n      let object = {\n        x: treeNewPosX,\n        y: 0,\n        z: treeNewPosZ\n      }\n      forestNumber.push(object)\n    }\n\n    console.log(forestNumber)\n\n    var initialState = [\n      {\n        x: 6,\n        y: 0,//0 obli\n        z: 0,\n      },\n      {\n        x: 11,\n        y: 0,//0 obli\n        z: 4,\n      },\n      {\n        x: 9,\n        y: 0,//0 obli\n        z: 1,\n      },\n      {\n        x: 12,\n        y: 0,//0 obli\n        z: 4,\n      },\n      {\n        x: 13,\n        y: 0,//0 obli\n        z: 4,\n      },\n      {\n        x: -4,\n        y: 0,//0 obli\n        z: 8,\n      },\n    ]\n    \n    //text\n    /*let instance = new TextSprite({\n      alignment: 'left',\n      color: '#ffffff',\n      fontFamily: 'helvetica, sans-serif',\n      fontSize: 50,\n      fontStyle: 'normal',\n      fontWeight: 'bold',\n      text: [\n        'METEO',\n      ].join('\\n'),\n    });\n    scene.add(instance);*/\n    \n    \n    const loader = new THREE.FontLoader();\n\t\t\t\tloader.load( 'https://threejs.org/examples/fonts/helvetiker_bold.typeface.json', function ( font ) {\n\n\t\t\t\t\tconst color = 0xffffff;\n\n\t\t\t\t\tconst matDark = new THREE.LineBasicMaterial( {\n\t\t\t\t\t\tcolor: color,\n\t\t\t\t\t\tside: THREE.DoubleSide\n\t\t\t\t\t} );\n\n\t\t\t\t\tconst matLite = new THREE.MeshBasicMaterial( {\n\t\t\t\t\t\tcolor: color,\n\t\t\t\t\t\ttransparent: true,\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\tside: THREE.DoubleSide\n\t\t\t\t\t} );\n\n\t\t\t\t\tconst shapes = font.generateShapes( message, 100 );\n\n\t\t\t\t\tconst geometry = new THREE.ShapeGeometry( shapes );\n\n\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t\tconst xMid = - 0.5 * ( geometry.boundingBox.max.x - geometry.boundingBox.min.x );\n\n\t\t\t\t\tgeometry.translate( xMid, 0, 0 );\n\n\t\t\t\t\t// make shape ( N.B. edge view not visible )\n\n\t\t\t\t\tconst text = new THREE.Mesh( geometry, matLite );\n\t\t\t\t\ttext.position.z = - 150;\n\t\t\t\t\tscene.add( text );\n\n\t\t\t\t\t// make line shape ( N.B. edge view remains visible )\n\n\t\t\t\t\tconst holeShapes = [];\n\n\t\t\t\t\tfor ( let i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\t\t\tconst shape = shapes[ i ];\n\n\t\t\t\t\t\tif ( shape.holes && shape.holes.length > 0 ) {\n\n\t\t\t\t\t\t\tfor ( let j = 0; j < shape.holes.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tconst hole = shape.holes[ j ];\n\t\t\t\t\t\t\t\tholeShapes.push( hole );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tshapes.push.apply( shapes, holeShapes );\n\n\t\t\t\t\tconst lineText = new THREE.Object3D();\n\n\t\t\t\t\tfor ( let i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\t\t\tconst shape = shapes[ i ];\n\n\t\t\t\t\t\tconst points = shape.getPoints();\n\t\t\t\t\t\tconst geometry = new THREE.BufferGeometry().setFromPoints( points );\n\n\t\t\t\t\t\tgeometry.translate( xMid, 0, 0 );\n\n\t\t\t\t\t\tconst lineMesh = new THREE.Line( geometry, matDark );\n\t\t\t\t\t\tlineText.add( lineMesh );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscene.add( lineText );\n\n\t\t\t\t} ); //end load function */\n    \n    //terrain\n    const terraingeometry = new THREE.PlaneGeometry( 100, 100, 32 );\n    const terrainmaterial = new THREE.MeshBasicMaterial( {color: 0xabeb96, side: THREE.DoubleSide} );\n    const terrainplane = new THREE.Mesh( terraingeometry, terrainmaterial );\n    terrainplane.rotation.x = - Math.PI / 2 ;\n    scene.add( terrainplane );\n\n    //tree\n    //fonction qui crée plusieurs arbres\n    function treeAdder(positions) {\n      positions.forEach(function (position) {\n        var xset = position.x;\n        var zset = position.z;\n\n        const treegeometry = new THREE.ConeGeometry( 0.5, 4, 32 );\n        const treematerial = new THREE.MeshPhysicalMaterial( {color: 0x854e00} );\n        const treecone = new THREE.Mesh( treegeometry, treematerial );\n        treecone.position.x = xset;\n        treecone.position.z = zset;\n        treecone.position.y = 2.5;\n\n        const treegeometry2 = new THREE.ConeGeometry( 1.5, 5, 32 );\n        const treematerial2 = new THREE.MeshPhysicalMaterial( {color: 0x13ad3c} );\n        const treecone2 = new THREE.Mesh( treegeometry2, treematerial2 );\n        treecone2.position.x = xset;\n        treecone2.position.z = zset;\n        treecone2.position.y = 3.5;\n\n        scene.add( treecone );\n        scene.add( treecone2 );\n      }); \n    }  \n    //Ajout des Arbres\n    treeAdder(forestNumber)\n    //cubeAdder(initialState)\n\n    camera.position.y = 74;\n    camera.position.z = 129;\n    camera.rotation.x = -0.209;\n\n    \n    //orbitcontrols.update();\n\n    var animate = function () {\n      requestAnimationFrame( animate );\n      //console.log('POSZ'+camera.position.z)\n      //console.log('POSY'+camera.position.y)\n      //console.log('ROTX'+camera.rotation.x)\n      renderer.render( scene, camera );\n    };\n    animate();\n\n    // === THREE.JS EXAMPLE CODE END ===\n  }\n  componentDidUpdate(){\n    \n  }\n  render() {\n    return (\n      <div />\n    )\n  }\n}\nconst rootElement = document.getElementById(\"root\");\n\n\nexport default ThreedBackground;","import React, { useRef, Suspense, Component } from 'react'\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\n\n\n//Checker react.useRef mais dans un component\n\n\nfunction Hut(props) {\n    const group = useRef()\n    const { nodes, materials, animations } = useGLTF('/scene.gltf')\n    const { actions } = useAnimations(animations, group)\n    return (\n      <group ref={group} {...props} dispose={null}>\n        <group rotation={[-Math.PI / 2, 0, 0]}>\n          <group rotation={[Math.PI / 2, 0, 0]}>\n            <group position={[-502.64, 422.99, -132.71]}>\n              <group\n                name=\"������������_��������������_2\"\n                position={[-10.87, 231.34, -23.05]}\n                rotation={[Math.PI / 2, -0.91, -Math.PI]}>\n                <group position={[13.88, -40, -33.71]} rotation={[1.77, -0.46, -2.71]}>\n                  <mesh\n                    material={materials.material_2}\n                    geometry={nodes['������������_������_����������������2_0'].geometry}\n                  />\n                </group>\n                <mesh\n                  material={materials.material_2}\n                  geometry={nodes['������������_��������������_2_����������������2_0'].geometry}\n                />\n              </group>\n              <group position={[21.39, -295, 98.38]}>\n                <mesh\n                  material={materials.material}\n                  geometry={nodes['������������_������_2_����������������_0'].geometry}\n                />\n                <mesh\n                  material={materials.material}\n                  geometry={nodes['������������_������_2_����������������_0_1'].geometry}\n                />\n              </group>\n              <group position={[-10.52, 63.66, -75.33]} rotation={[Math.PI, 0, Math.PI]}>\n                <mesh material={materials.material_1} geometry={nodes['rr_����������������1_0'].geometry} />\n              </group>\n            </group>\n          </group>\n        </group>\n      </group>\n    )\n}\n\nuseGLTF.preload('/Cottage.glb')\n    \nclass Farm extends Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return(\n          <Suspense fallback={null}>\n            <Hut scale={[0.02, 0.02, 0.02]} position={[2, 5, -20]}/>\n          </Suspense>\n        )\n    }\n}\n\nexport default Farm;","import React, { useRef, useState, useEffect, useMemo, Suspense, Component } from 'react'\nimport * as THREE from 'three'\nimport { Canvas, useFrame, useThree, extend, useLoader } from 'react-three-fiber'\nimport TextSprite from '@seregpie/three.text-sprite';\nimport { softShadows, MeshWobbleMaterial, useTexture, ContactShadows, Environment, useGLTF, useAnimations, Sky, Stars, OrbitControls } from \"@react-three/drei\";\nimport { useSprings, useSpring, a } from 'react-spring/three'\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport JSONfont from \"../fonts/Cocogoose.json\";\nimport Farm from \"./three/Farm.jsx\"\nimport { HDRCubeTextureLoader } from 'three/examples/jsm/loaders/HDRCubeTextureLoader'\n\nvar night = false\n//const hourtest = 12\nfunction letItRain(){\n\n}\n\nfunction azimuth(){\n  //Get current geographic hour\n  var d = new Date();\n  //get current hour\n  var currenthour = d.getHours();\n  console.log(\"CurrentHour :\"+currenthour)\n\n  //get by API\n  let daystart = 6; //heure de début de journée\n  let daylength = Math.round(12) //longueur du jour\n\n  //currenthour = hourtest\n\n  //Ex : Valeur de départ Azimuth: 0.1171\n  //Ex : Valeur de fin Azimuth: 0.3882\n  //Ex : longueur totale de la translation d'azimuth : 0.3882 - 0.1171\n  let total = 0.5\n\n  //déclaration de la valeur courante\n  let azimuthNow\n\n  azimuthNow = (total * (currenthour-daystart))/daylength\n\n  //sets night to true if night it is\n  if ( (currenthour > daylength + daystart)||(currenthour < daylength) ){\n    night = true\n    console.log(night)\n  }\n\n  console.log(azimuthNow)\n  console.log(\"AZIMUTH NOW: \"+azimuthNow)\n  return azimuthNow\n}\n\nfunction inclination(){\n  //Get current geographic hour\n  var d = new Date();\n  //get current hour\n  var currenthour = d.getHours();\n  //console.log(n)\n\n  //get by API\n  let daystart = 6; //heure de début de journée\n  let daylength = Math.round(12) //longueur du jour\n  let noon = daylength/2 + daystart //midi = la moitié de la journée de soleil + l'heure de démarrage\n  //soit pour un jour d'ensoleillement de 11h = 11/2 + 6 = 11.5\n\n  //currenthour = hourtest\n\n  //Ex : Valeur de départ Inclination: 0.1171\n  //Ex : Valeur de fin Inclination: 0.3882\n  //Ex : longueur totale de la translation d'azimuth : 0.3882 - 0.1171\n  let total = 0.5 - 0.388\n\n  //déclaration de la valeur courante\n  let inclinationNow\n\n  if (currenthour < noon) {\n    inclinationNow = (currenthour - daystart) * total / (daylength/2);\n  }\n  else\n  {\n    let diffHour = noon - (currenthour - noon)\n    inclinationNow = (diffHour - daystart) * total / (daylength/2);\n  }\n\n  console.log(\"INCLINATION NOW: \"+inclinationNow + 0.50)\n  return inclinationNow + 0.50\n  /*\n  azimuth\n  0.1171\n  0.3882\n\n  inclination\n  0.5\n  0.388\n  0.5\n\n  exposure\n  0.1171   */\n}\n\n// soft Shadows\nsoftShadows();\n\n//globals\nvar forestNumber = []\nconst numbertrees = 1000\nconst numberclouds = 100\n\n//text\nfunction TextMesh(props) {\n    const [hovered, setHover] = useState(false);\n    const mesh = useRef();\n  \n    // actions to perform in current frame\n    useFrame(() => {\n      //mesh.current.rotation.x = mesh.current.rotation.y += 0.01;\n      //mesh.current.geometry.center();\n    });\n    \n    // load in font\n    const font = new THREE.FontLoader().parse(JSONfont);\n  \n    // configure font mesh\n    const textOptions = {\n      font,\n      size: 100,\n      height: hovered ? 1 : 0\n    };\n    //qqch qui ne se fait pas dans le update !!!!!!!!!!!\n  \n    return (\n      <mesh\n        {...props}\n        ref={mesh}\n        onPointerOver={(e) => setHover(true)}\n        onPointerOut={(e) => setHover(false)}\n      >\n        <textGeometry attach=\"geometry\" args={[\"LYON\", textOptions]} />\n        <meshBasicMaterial color={hovered ? 'black' : 'white'} />\n      </mesh>\n    );\n  }\n  \n\nfunction getRandomInt2(max) {\n    return Math.floor(Math.random() * Math.floor(max)) - Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction getTime(max) {\n\n}\n\n//testounet\n//-----------------------\n//-------------------\n//----------------\n\n\nconst Rain = ({ position, color, args, numberrain }) => {\n\n  var rainpositions = []\n  for (let i = 0; i < numberrain; i++) {\n      let treeNewPosX = getRandomInt(45);\n      let treeNewPosZ = getRandomInt(45); \n      let object = {\n        x: treeNewPosX,\n        y: 40+getRandomInt(10),\n        z: treeNewPosZ\n      }\n      rainpositions.push(object)\n  }\n\n\n  //ref to target the mesh\n  const grouprain = useRef();\n\n  //useFrame allows us to re-render/update on each frame\n  useFrame(() => {\n    if (grouprain.current == null ){\n      console.log(\"grouprain null\")\n    }\n    else\n    {\n      if (grouprain.current.position.y >= -40){\n        grouprain.current.position.y = grouprain.current.position.y -= 1.2\n      }\n      else\n      {\n        grouprain.current.position.y = 5;\n      }\n    }\n  });\n\n  //Basic expand state\n  const [expand, setExpand] = useState(false);\n  // React spring expand animation\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n  });\n  return  (\n    <group ref={grouprain}>\n      { rainpositions.map((d, index) =>  (\n      <a.mesh\n        position={[d.x, d.y, d.z]}\n        key={index}\n        onClick={() => setExpand(!expand)}\n        scale={props.scale}\n        castShadow>\n        <boxBufferGeometry attach='geometry' args={args} />\n        <meshBasicMaterial color={color} />\n      </a.mesh>\n    ))}\n    </group>\n  );\n};\n\n\n\nconst Snow = ({ position, color, args, numbersnow }) => {\n\n  var snowpositions = []\n  for (let i = 0; i < numbersnow; i++) {\n      let treeNewPosX = getRandomInt(45);\n      let treeNewPosZ = getRandomInt(45); \n      let object = {\n        x: treeNewPosX,\n        y: 40+getRandomInt(10),\n        z: treeNewPosZ\n      }\n      snowpositions.push(object)\n  }\n\n\n  //ref to target the mesh\n  const groupsnow = useRef();\n\n  //useFrame allows us to re-render/update on each frame\n  useFrame(() => {\n    if (groupsnow.current == null ){\n      console.log(\"groupsnow null\")\n    }\n    else\n    {\n      if (groupsnow.current.position.y >= -40){\n        groupsnow.current.position.y = groupsnow.current.position.y -= 1.2\n      }\n      else\n      {\n        groupsnow.current.position.y = 5;\n      }\n    }\n  });\n\n  //Basic expand state\n  const [expand, setExpand] = useState(false);\n  // React spring expand animation\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n  });\n  return  (\n    <group ref={groupsnow}>\n      { snowpositions.map((d, index) =>  (\n      <a.mesh\n        position={[d.x, d.y, d.z]}\n        key={index}\n        onClick={() => setExpand(!expand)}\n        scale={props.scale}\n        castShadow>\n        <sphereBufferGeometry attach='geometry' args={args} />\n        <meshBasicMaterial color={color} />\n      </a.mesh>\n    ))}\n    </group>\n  );\n};\n\n\nfunction randomBetween(x){\n  let numb = getRandomInt2(x)\n  if ( numb > 13 || numb < -13 ){\n    return numb\n  }\n  else {\n    randomBetween(x)\n  }\n}\n\nconst treecolors = ['#2c9400', '#1b4f08', '#e6b522']\nconst cloudcolors = ['#ffffff']\nconst raincolors = ['#000000']\nconst randomtrees = i => {\n  return {\n    position: [randomBetween(48), 6, getRandomInt2(48)],\n    color: treecolors[Math.round(Math.random() * (treecolors.length - 1))],\n  }\n}\n\nconst randomclouds = i => {\n    const r = Math.random()\n    return {\n      position: [getRandomInt2(48), 50 + getRandomInt2(15), getRandomInt2(48)],\n      color: cloudcolors[Math.round(Math.random() * (cloudcolors.length - 1))],\n    }\n}\n\n\nconst dataclouds = new Array(numberclouds).fill().map(() => {\n    return {\n      color: cloudcolors[Math.round(Math.random() * (cloudcolors.length - 1))],\n      args: [20, 10, 20],\n    }\n})\n\nfunction Box(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => {\n    //mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n  })\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n      onClick={(e) => setActive(!active)}\n      onPointerOver={(e) => setHover(true)}\n      onPointerOut={(e) => setHover(false)}>\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\n/*   DEMAIN IMPORTANT\nfunction Model({ url }) {\n  const { scene } = useLoader(GLTFLoader, url, draco())\n  return <primitive object={scene} dispose={null} />\n}*/\n\nfunction Feuillage(state) {\n    if (state == false) {\n        var treecolors = ['#2c9400', '#1b4f08', '#e6b522']\n    }\n    else\n    {\n        var treecolors = ['#ffffff', '#e3e3e3', '#bfffd3']\n    }\n\n    const datatrees = new Array(numbertrees).fill().map(() => {\n        return {\n          color: treecolors[Math.round(Math.random() * (treecolors.length - 1))],\n          args: [2, 7, 10]\n        }\n    })\n    const [springs, set] = useSprings(numbertrees, i => ({\n      from: randomtrees(i),\n      ...randomtrees(i),\n    }))\n    return datatrees.map((d, index) => (\n      <a.mesh key={index} {...springs[index]} castShadow receiveShadow>\n        <coneBufferGeometry attach=\"geometry\" args={d.args} />\n        <a.meshPhysicalMaterial attach=\"material\" color={springs[index].color} />\n      </a.mesh>\n    ))\n}\n\nfunction Clouds() {\n    const [springs2, set] = useSprings(numberclouds, i => ({\n      from: randomclouds(i),\n      ...randomclouds(i),\n    }))\n    return dataclouds.map((d, index) => (\n      <a.mesh key={index} {...springs2[index]} castShadow receiveShadow>\n        <boxBufferGeometry attach=\"geometry\" args={d.args} />\n        <a.meshPhysicalMaterial attach=\"material\" color={springs2[index].color} roughness={0} opacity={0.8} transparent={true} />\n      </a.mesh>\n    ))\n}\n\nfunction Loading() {\n  return (\n    <mesh visible position={[0, 0, 0]} rotation={[0, 0, 0]}>\n      <sphereGeometry attach=\"geometry\" args={[1, 16, 16]} />\n      <meshStandardMaterial\n        attach=\"material\"\n        color=\"white\"\n        transparent\n        opacity={0.6}\n        roughness={1}\n        metalness={0}\n      />\n    </mesh>\n  );\n}\n\nfunction Lights() {\n  return (\n    <group>\n      <pointLight intensity={1} />\n      <ambientLight intensity={0.3} />\n      <spotLight\n        castShadow\n        intensity={0.1}\n        angle={Math.PI / 7}\n        position={[150, 150, 250]}\n        penumbra={1}\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n      />\n    </group>\n  )\n}\n\n\nfunction Terrain(props, terraincolor) {\n    // This reference will give us direct access to the mesh\n    const meshterrain = useRef()\n    console.log(props.terraincolor)\n    // Set up state for the hovered and active state\n    const [hovered, setHover] = useState(false)\n    const [active, setActive] = useState(false)\n    // Rotate mesh every frame, this is outside of React without overhead\n    useFrame(() => {\n      //mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n    })\n    return (\n      <mesh\n        {...props}\n        ref={meshterrain}\n        scale={active ? [1, 1, 1] : [1, 1, 1]}\n        onClick={(e) => setActive(!active)}\n        onPointerOver={(e) => setHover(true)}\n        onPointerOut={(e) => setHover(false)}>\n        <boxBufferGeometry args={[105, 3, 105]} />\n        <meshStandardMaterial color={props.terraincolor} />\n      </mesh>\n    )\n}\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max)) - Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction CornField(props, fieldcolor) {\n  // This reference will give us direct access to the mesh\n  const meshfield = useRef()\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => {\n    //mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n  })\n  return (\n    <mesh\n      {...props}\n      ref={meshfield}\n      scale={active ? [1, 1, 1] : [1, 1, 1]}\n      onClick={(e) => setActive(!active)}\n      onPointerOver={(e) => setHover(true)}\n      onPointerOut={(e) => setHover(false)}>\n      <boxBufferGeometry args={[20, 2,40]} />\n      <meshStandardMaterial color={props.fieldcolor} />\n    </mesh>\n  )\n}\n\n/*function TwitterBird(props) {\n  const groupbird = useRef()\n  const { nodes, materials } = useGLTF('/twitter.glb')\n\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n\n  return (\n    <group ref={groupbird} {...props} dispose={null}>\n      <mesh \n        geometry={nodes.twitter.geometry} \n        rotation={[Math.PI / 2, 0, 0]}\n        onClick={(e) => setActive(!active)}\n        onPointerOver={(e) => setHover(true)}\n        onPointerOut={(e) => setHover(false)}>\n        <meshPhysicalMaterial color={hovered ? '#9cfffd' : '#00acee'} side={THREE.DoubleSide}/>\n      </mesh>\n    </group>\n  )\n}*/\n  \n/*\n\n\n\n<Rain\n            color='grey'\n            args={[0.3, 10, 0.3]}\n        />\n\n\n<Stars\n          radius={100} // Radius of the inner sphere (default=100)\n          depth={50} // Depth of area where stars should fit (default=50)\n          count={5000} // Amount of stars (default=5000)\n          factor={4} // Size factor (default=4)\n          saturation={0} // Saturation 0-1 (default=0)\n          fade // Faded dots (default=false)\n        />\n\n\n*/\n\nfunction Groupfarm(props) {\n  const groupfarm = useRef()\n  const { nodes, materials, animations } = useGLTF('/scene.gltf')\n  const { actions } = useAnimations(animations, groupfarm)\n  return (\n    <group ref={groupfarm} {...props} dispose={null}>\n      <group rotation={[-Math.PI / 2, 0, 0]}>\n        <group rotation={[Math.PI / 2, 0, 0]}>\n          <group position={[-502.64, 422.99, -132.71]}>\n            <group\n              name=\"������������_��������������_2\"\n              position={[-10.87, 231.34, -23.05]}\n              rotation={[Math.PI / 2, -0.91, -Math.PI]}>\n              <group position={[13.88, -40, -33.71]} rotation={[1.77, -0.46, -2.71]}>\n                <mesh\n                  material={materials.material_2}\n                  geometry={nodes['������������_������_����������������2_0'].geometry}\n                />\n              </group>\n              <mesh\n                material={materials.material_2}\n                geometry={nodes['������������_��������������_2_����������������2_0'].geometry}\n              />\n            </group>\n            <group position={[21.39, -295, 98.38]}>\n              <mesh\n                material={materials.material}\n                geometry={nodes['������������_������_2_����������������_0'].geometry}\n              />\n              <mesh\n                material={materials.material}\n                geometry={nodes['������������_������_2_����������������_0_1'].geometry}\n              />\n            </group>\n            <group position={[-10.52, 63.66, -75.33]} rotation={[Math.PI, 0, Math.PI]}>\n              <mesh material={materials.material_1} geometry={nodes['rr_����������������1_0'].geometry} />\n            </group>\n          </group>\n        </group>\n      </group>\n    </group>\n  )\n}\n\nclass Home extends Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return(\n            <Canvas style={{height:\"100vh\",width:\"100vw\",backgroundColor:\"#abfff5\"}}>\n            <Sky\n              distance={45000} // Camera distance (default=450000)\n              inclination={inclination()} // Sun elevation angle from 0 to 1 (default=0)\n              azimuth={azimuth()} // Sun rotation around the Y axis from 0 to 1 (default=0.25)\n              turbidity={20}\n              rayleigh={4}\n              exposure={1000}\n            />\n            <Lights />\n            <OrbitControls />\n            <Terrain \n                position={[0, 0, 0]} \n                terraincolor = {this.props.terraincolor}\n            />\n            <Feuillage />\n            <Clouds />\n            <TextMesh position={[-200, -70, -200]}/>\n            <Snow\n                color='white'\n                args={[1, 1, 1]}\n                numbersnow = {this.props.snow}\n            />\n            <Rain\n                color='grey'\n                args={[0.3, 10, 0.3]}\n                numberrain = {this.props.rain}\n            />\n            <Suspense fallback={null}>\n              <Groupfarm scale={[0.02, 0.02, 0.02]} position={[3, 5, -15]}/>\n            </Suspense>\n            <CornField position={[0, 2, 20]} fieldcolor={this.props.fieldcolor}/>\n          </Canvas>\n        )\n    }\n}\n\nexport default Home;\n\n/*<Stars\nradius={100} // Radius of the inner sphere (default=100)\ndepth={50} // Depth of area where stars should fit (default=50)\ncount={5000} // Amount of stars (default=5000)\nfactor={4} // Size factor (default=4)\nsaturation={0} // Saturation 0-1 (default=0)\nfade // Faded dots (default=false)\n\n  \n            <Farm />\n\n            <Rain\n                color='grey'\n                args={[0.3, 10, 0.3]}\n                numberrain = {this.props.rain}\n            />\n            <Snow\n                color='white'\n                args={[1, 1, 1]}\n                numbersnow = {this.props.snow}\n            />\n            <Suspense fallback={null}>\n              <TwitterBird position={[100, 100, 10]} rotation={[-0.5, 0.5, 0]}/>\n            </Suspense>\n<Groupfarm scale={[0.02, 0.02, 0.02]} position={[3, 5, -3]}/>\n            \n\n/>*/","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\nclass ThreeGui extends Component {\n  constructor(props){\n    super(props)\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.props.rain}</h1>\n        test\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    rain: state.rain\n  }\n}\nexport default connect(mapStateToProps)(ThreeGui)","export const INCREMENT_RAIN = \"frontwidgets/rain/INCREMENT\"\nexport const DECREMENT_RAIN = \"frontwidgets/rain/DECREMENT\"\n\nconst counterReducer = ( state={\n    snow: 7,\n    rain: 12,\n    trees: 23,\n    clouds: 40\n}, action ) => {\n    switch(action.type){\n      case INCREMENT_RAIN:\n        return {\n            ...state, rain: state.rain+10\n        }\n      case DECREMENT_RAIN:\n        return {\n            ...state, rain: state.rain-10\n        }  \n      default:\n        return state\n    }\n}\n\nexport default counterReducer\n\nexport function incrementRain(){\n    return {\n        type: INCREMENT_RAIN\n    }\n}\n\nexport function decrementRain(){\n    return {\n        type: INCREMENT_RAIN\n    }\n}","const loggedReducer = (state = false, action) => {\n    switch(action.type){\n        case 'SIGN_IN':\n          return !state\n        default:\n          return state\n    }\n}\n\nexport default loggedReducer","import React, { Component } from 'react';\nimport Home from './components/Home.jsx';\nimport ThreeGui from './components/ThreeGui';\nimport { createStore } from 'redux'\nimport  allReducers  from './reducers'\nimport { Provider } from 'react-redux'\nimport counterReducer from './reducers/counter'\n\nconst store = createStore(counterReducer)\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      snow: 0,\n      terraincolor: '#667306',\n      fieldcolor: '#f5be18',\n      rain: 0,\n      state: 0\n    }\n\n    this.handleButtonSnow = this.handleButtonSnow.bind(this)\n    this.handleButtonRain = this.handleButtonRain.bind(this)\n  }\n  handleButtonSnow(){\n    if ( this.state.snow == 0 ){\n      this.setState({\n        snow: 100,\n        terraincolor: '#ffffff',\n        fieldcolor: '#dedede',\n        state: 1\n      })\n    }\n    else\n    {\n      this.setState({\n        snow: 0,\n        terraincolor: '#667306',\n        fieldcolor: '#f5be18',\n      })\n    }\n  }\n  handleButtonRain(){\n    if ( this.state.rain == 0 ){\n      this.setState({\n        rain: 100\n      })\n    }\n    else\n    {\n      this.setState({\n        rain: 0\n      })\n    }\n  }\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <h1>{this.state.snow}</h1>\n          <ThreeGui/>\n          <button onClick={this.handleButtonSnow}>Snow</button>\n          <button onClick={this.handleButtonRain}>Rain</button>\n          <Home \n            snow={this.state.snow}\n            rain={this.state.rain}\n            terraincolor={this.state.terraincolor}\n            state={this.state.state}\n            fieldcolor={this.state.fieldcolor}\n          />\n        </div>\n      </Provider>\n    )\n  }\n}\nexport default App;","import counterReducer from './counter'\nimport loggedReducer from './isLogged'\nimport { combineReducers } from 'redux'\n\nconst allReducers = combineReducers({\n    counter: counterReducer,\n    isLogged: loggedReducer\n})\n\nexport default allReducers","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ThreedBackground from './ThreedBackground';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App'\nimport { ActionCreators } from 'redux-devtools';\n\n\n//STORE : Globalized state\n/*\n//ACTION INCREMENT\nconst increment = () => {\n  return {\n    type: 'INCREMENT'\n  }\n}\n//DECREMENT\nconst decrement = () => {\n  return {\n    type: 'DECREMENT'\n  }\n}\n//REDUCER\nconst counter = ( state = 0, action ) =>{\n  switch(action.type){\n    case \"INCREMENT\":\n      return state+10\n    case \"DECREMENT\":\n      return state-10\n  }\n} \n\nlet store = createStore(counter)\n\n//display in console\nstore.subscribe(() => console.log(store.getState()))\n\nstore.dispatch(increment())\nstore.dispatch(decrement())\n*/\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n//Other components     <ThreedBackground />\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}